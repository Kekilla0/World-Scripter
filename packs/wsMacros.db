{"_id":"6ph2QTloJ3cW0R0B","name":"Init Change (d10)","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.3cyzG5rpaG7mkkTl"}},"scope":"global","command":"const config = { active : true };\n\nif(config.active)\n{\n    CONFIG.Combat.initiative.formula = `d10 + @attributes.init.mod + @attributes.init.prof + @attributes.init.bonus`;\n    Combat.prototype._getInitiativeFormula = function(combatant) {\n        const actorData = combatant.actor.getRollData();\n        let formula = `d10 + ${actorData.attributes.init.mod} + ${actorData.attributes.init.prof} + ${actorData.attributes.init.bonus}`;\n    \n        const tiebreaker = game.settings.get(\"dnd5e\",\"initiativeDexTiebreaker\");\n        if(tiebreaker) formula += `+ ${actorData.abilities.dex.value/100}`;\n  \n        return formula;\n    }\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"9Rwh5bEjgC2emrnd","name":"Proficiency Die","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.npe46niTYD6buTjL"}},"scope":"global","command":"/*\n  World Scripter : Proficiency Dice\n*/\nconst config = {\n  active : false,\n  bonusDie : {\n    2 : `1d4`,\n    3 : `1d6`,\n    4 : `1d8`,\n    5 : `1d10`,\n    6 : `1d12`\n  },\n  fn : {\n    error : (...args) => {ui.notifications.error(`Proficiency Die Macro | `, ...args);}\n  }\n}\nif(config.active)\n  Hooks.on(`preCreateChatMessage`, proficientMessage)\n\nfunction proficientMessage(message)\n{\n  if(message.user === game.user.id)\n  {    \n    //determine if proficient\n    let profObj = proficient(message);\n    if(profObj.prof === null || profObj.prof === 0) return;\n    let newProf = config.bonusDie[profObj.prof] || null;\n    if(newProf === null) return;\n\n    //remake roll without proficiency & with new bonus_die\n    let roll = new Roll(JSON.parse(message.roll).formula.replace(`+ ${profObj.search}`, `${profObj.keep ? `+ ${profObj.keep}` : ``} + ${newProf}`)).roll();\n\n    //change content & roll\n    setProperty(message,\"content\", `${roll.total}`);\n    setProperty(message,\"roll\", JSON.stringify(roll));\n  }\n}\n\nfunction proficient(message)\n{\n  let info = message.flags.dnd5e.roll;\n  let actor = canvas.tokens.get(message.speaker.token).actor || game.actors.get(message.speaker.actor);\n\n  if(!actor) return 0;\n\n  switch(info.type)\n  {\n    case `ability` :\n      return {\n        search : null, \n        prof : null, \n        keep : null,\n      };\n    case `save` : \n      let saveData = actor.data.data.abilities[info.abilityId];\n      return {\n        search : saveData.prof, \n        prof : (saveData.save - saveData.mod), \n        keep : null,\n      }\n    case `skill` :\n      let skillData = actor.data.data.skills[info.skillId];\n      return {\n        search : skillData.total, \n        prof : skillData.prof, \n        keep : skillData.mod,\n      };\n    case `attack` :\n      let {proficient} = actor.items.get(info.itemId).data.data;\n      return  {\n        search : actor.data.data.attributes.prof, \n        prof : proficient ? actor.data.data.attributes.prof : 0, \n        keep : null\n      }\n    default :\n      config.fn.error(`Type not accounted for ${info.type}`);\n      return 0;\n  }\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"L9W2eBAVcKmg2EDm","name":"Global Functions","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"core":{"sourceId":"Macro.gquC32RvjVE0P3tp"},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let windowFunctions = { buttonDialog, quickDialog };\n\nObject.entries(windowFunctions).forEach(([key,value])=> window[key] = value );\n\nArray.prototype.forEachAsync = async function (callback) {\n  for(let index = 0; index < this.length; index++)\n      await callback(this[index], index, this);\n}\n\nArray.prototype.shuffle = function() {\n  var currentIndex = this.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = this[currentIndex];\n    this[currentIndex] = this[randomIndex];\n    this[randomIndex] = temporaryValue;\n  }\n\n  return this;\n}\n\nasync function buttonDialog(data){\n  return await new Promise((resolve) => {\n    let buttons = {}, dialog;\n\n    data.buttons.forEach(([str, callback])=>{\n      buttons[str] = {\n        label : str,\n        callback\n      }\n    });\n  \n    dialog = new Dialog({title : data.title , content : data.content, buttons, close : () => resolve(true) }).render(true);\n  });\n}\n\nasync function quickDialog({data, title = `Quick Dialog`} = {}){\n  data = data instanceof Array ? data : [data];\n\n  return await new Promise((resolve) => {\n    let content = `\n    <table style=\"width:100%\">\n      ${data.map(({type, label, options}, i)=> {\n        if(type.toLowerCase() === `select`)\n        {\n          return `<tr><th style=\"width:50%\"><label>${label}</label></th><td style=\"width:50%\"><select id=\"${i}qd\">${options.map((e,i)=> `<option value=\"${e}\">${e}</option>`).join(``)}</td></tr>`;\n        }else if(type.toLowerCase() === `checkbox`){\n          return `<tr><th style=\"width:50%\"><label>${label}</label></th><td style=\"width:50%\"><input type=\"${type}\" id=\"${i}qd\" ${options || ``}/></td></tr>`;\n        }else{\n          return `<tr><th style=\"width:50%\"><label>${label}</label></th><td style=\"width:50%\"><input type=\"${type}\" id=\"${i}qd\" value=\"${options instanceof Array ? options[0] : options}\"/></td></tr>`;\n        }\n      }).join(``)}\n    </table>`;\n\n    new Dialog({\n      title, content,\n      buttons : {\n        Ok : { label : `Ok`, callback : (html) => {\n          resolve(Array(data.length).fill().map((e,i)=>{\n            let {type} = data[i];\n            if(type.toLowerCase() === `select`)\n            {\n              return html.find(`select#${i}qd`).val();\n            }else{\n              switch(type.toLowerCase())\n              {\n                case `text` :\n                case `password` :\n                case `radio` :\n                  return html.find(`input#${i}qd`)[0].value;\n                case `checkbox` :\n                  return html.find(`input#${i}qd`)[0].checked;\n                case `number` :\n                  return html.find(`input#${i}qd`)[0].valueAsNumber;\n              }\n            }\n          }));\n        }}\n      }\n    }).render(true);\n  });\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"Ze4poHGIZ7nEFz2K","name":"0 HP Death Overlay","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"chat","flags":{"core":{"sourceId":"Macro.NmhRh7L9wKok8Gzi"}},"scope":"global","command":"/*\n  World Scripter Macro : 0 HP Death Overlay\n*/\nconst config = {\n  active : false,\n  effectData : [\n    {\n      changes : [],\n      duration : {},\n      flags : { core : { overlay : true, statusId : \"dead\" }},\n      icon : \"icons/svg/skull.svg\",\n      label : \"dead\"\n    }\n  ]\n};\nif(config.active && game.user.isGM)\n  Hooks.on(`preUpdateToken`, deathOverlay);\n\nfunction deathOverlay(scene, tokenData,updateData)\n{\n  if(isZeroHealth() && isNPC())\n  {\n    setProperty(updateData, \"actorData.effects\", config.effectData);\n  }\n  function isZeroHealth()\n  {\n    return getProperty(updateData, \"actorData.data.attributes.hp.value\") === 0;\n  }\n  function isNPC()\n  {\n    return !game.actors.get(tokenData.actorId).hasPlayerOwner;\n  }\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"cLaFA6W5WQ4x5iVl","name":"Logo Removal","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.IeOh2UnxxgNxXkHn"},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"document.getElementById(\"logo\").src = \"\";\nsetNavigation();\n\nHooks.on(`renderSceneDirectory`, setNavigation)\n\nfunction setNavigation(){\n    let element = document.getElementById(\"navigation\");\n    element.style.left = \"20px\";\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Shortsword","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"dnd5e":{"itemMacro":true}},"scope":"global","command":"BetterRolls.quickRollById(\"C7QamOuo5aUd2RXF\", \"8VTuUZu0Th12hMyn\");","author":"rY3aSQCPtPJz0xsx","img":"systems/dnd5e/icons/items/weapons/sword-short.jpg","actorIds":[],"_id":"2JY8DY88kNHuUt4n"}
{"$$deleted":true,"_id":"2JY8DY88kNHuUt4n"}
{"name":"Debug","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"let report = {};\nlet output = '';\nfunction formatBytes(a,b=2){if(0===a)return\"0 Bytes\";const c=0>b?0:b,d=Math.floor(Math.log(a)/Math.log(1024));return parseFloat((a/Math.pow(1024,d)).toFixed(c))+\" \"+[\"Bytes\",\"KB\",\"MB\",\"GB\",\"TB\",\"PB\",\"EB\",\"ZB\",\"YB\"][d]}\n\n// Foundry Details\nreport.System = {\n  Foundry: game.data.version,\n  System: `${game.system.id} version ${game.system.data.version}`,\n};\n\nreport.User = {\n  Role: Object.keys(CONST.USER_ROLES)[game.user.role],\n}\n\nreport.Scene = {\n  Walls: canvas.walls.placeables.length,\n  Lights: canvas.lighting.placeables.length,\n  Tokens: canvas.tokens.placeables.length,\n  Tiles: canvas.tiles.placeables.length,\n  Sounds: canvas.sounds.placeables.length,\n  Drawings: canvas.drawings.placeables.length,\n  Notes: canvas.notes.placeables.length,\n  Dimensions: `${canvas.dimensions.width} x ${canvas.dimensions.height}`,\n  Background: `${canvas.background?.img?.texture?.width} x ${canvas.background?.img?.texture?.height}`,\n}\n\nreport.Database = {\n  Actors: game.actors.size,\n  Items: game.items.size,\n  Scenes: game.scenes.size,\n  Journals: game.journal.size,\n  Tables: game.tables.size,\n}\n\n// Module details\nlet ct = 0;\ngame.modules.forEach(m => {\n  if (m.active) ct++;\n});\n\nreport.Modules = {\n  Total: game.modules.size,\n  Enabled: ct,\n}\n\n// Browser Details\nreport.Browser = {\n  Platform: navigator.platform,\n  Vendor: navigator.vendor,\n  Agent: navigator.userAgent,\n}\n\n// Browser Details\nlet gl = canvas.app.renderer.gl;\nif (gl) {\n  report.WebGL = {\n    Context: gl.constructor.name,\n    GL_Vendor: gl.getParameter(gl.VENDOR),\n    Renderer: gl.getParameter(gl.RENDERER),\n    WebGL_Version: gl.getParameter(gl.VERSION),\n    MAX_TEXTURE_SIZE: gl.getParameter(gl.MAX_TEXTURE_SIZE),\n    MAX_RENDERBUFFER: gl.getParameter(gl.MAX_RENDERBUFFER_SIZE),\n  }\n} else {\n  report.WebGL = {\n    Context: 'FAILED TO GET WEBGL CONTEXT'\n  }\n}\n\n// If chromium browser we can check memory stats\nif (performance?.memory) {\n  report.Memory = {\n    Heap_Limit: formatBytes(performance?.memory.jsHeapSizeLimit),\n    Heap_Total: formatBytes(performance?.memory.totalJSHeapSize),\n    Heap_Used: formatBytes(performance?.memory.usedJSHeapSize),\n  }\n}\n\nfor (const [k1, v1] of Object.entries(report)) {\n  output += `${k1}:\\n`;\n  for (const [k2, v2] of Object.entries(v1)) {\n    output += `  ${k2}: ${v2}\\n`;\n  }\n}\n\nlet d = new Dialog({\n  title: `Debug Output`,\n  content: `<textarea readonly style=\"height: 500px\" type=\"text\" id=\"debugmacro\">${output}</textarea>`,\n  buttons: {\n    copy: {\n      label: `Copy to clipboard`,\n      callback: () => {\n        $(\"#debugmacro\").select();\n        document.execCommand('copy');\n      }\n    },\n    close: {\n      icon: \"<i class='fas fa-tick'></i>\",\n      label: `Close`\n    },\n  },\n  default: \"close\",\n  close: () => {}\n});\n\nd.options.width = 600;\nd.position.width = 600;\nd.render(true);","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"XN8XNS2r4q8pKREc"}
{"$$deleted":true,"_id":"XN8XNS2r4q8pKREc"}
{"_id":"L9W2eBAVcKmg2EDm","name":"Global Functions","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"core":{"sourceId":"Macro.gquC32RvjVE0P3tp"},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let windowFunctions = { buttonDialog, quickDialog };\n\nObject.entries(windowFunctions).forEach(([key,value])=> window[key] = value );\n\nArray.prototype.forEachAsync = async function (callback) {\n  for(let index = 0; index < this.length; index++)\n      await callback(this[index], index, this);\n}\n\nArray.prototype.shuffle = function() {\n  var currentIndex = this.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = this[currentIndex];\n    this[currentIndex] = this[randomIndex];\n    this[randomIndex] = temporaryValue;\n  }\n\n  return this;\n}\n\nasync function buttonDialog(data){\n  return await new Promise((resolve) => {\n    let buttons = {}, dialog;\n\n    data.buttons.forEach(([str, callback])=>{\n      buttons[str] = {\n        label : str,\n        callback\n      }\n    });\n  \n    dialog = new Dialog({title : data.title , content : data.content, buttons, close : () => resolve(true) }).render(true);\n  });\n}\n\nasync function quickDialog({data, title = `Quick Dialog`} = {}){\n  data = data instanceof Array ? data : [data];\n\n  return await new Promise((resolve) => {\n    let content = `\n    <table style=\"width:100%\">\n      ${data.map(({type, label, options}, i)=> {\n        if(type.toLowerCase() === `select`)\n        {\n          return `<tr><th style=\"width:50%\"><label>${label}</label></th><td style=\"width:50%\"><select id=\"${i}qd\">${options.map((e,i)=> `<option value=\"${e}\">${e}</option>`).join(``)}</td></tr>`;\n        }else if(type.toLowerCase() === `checkbox`){\n          return `<tr><th style=\"width:50%\"><label>${label}</label></th><td style=\"width:50%\"><input type=\"${type}\" id=\"${i}qd\" ${options || ``}/></td></tr>`;\n        }else{\n          return `<tr><th style=\"width:50%\"><label>${label}</label></th><td style=\"width:50%\"><input type=\"${type}\" id=\"${i}qd\" value=\"${options instanceof Array ? options[0] : options}\"/></td></tr>`;\n        }\n      }).join(``)}\n    </table>`;\n\n    new Dialog({\n      title, content,\n      buttons : {\n        Ok : { label : `Ok`, callback : (html) => {\n          resolve(Array(data.length).fill().map((e,i)=>{\n            let {type} = data[i];\n            if(type.toLowerCase() === `select`)\n            {\n              return html.find(`select#${i}qd`).val();\n            }else{\n              switch(type.toLowerCase())\n              {\n                case `text` :\n                case `password` :\n                case `radio` :\n                  return html.find(`input#${i}qd`)[0].value;\n                case `checkbox` :\n                  return html.find(`input#${i}qd`)[0].checked;\n                case `number` :\n                  return html.find(`input#${i}qd`)[0].valueAsNumber;\n              }\n            }\n          }));\n        }}\n      }\n    }).render(true);\n  });\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"cLaFA6W5WQ4x5iVl","name":"Logo Removal","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.IeOh2UnxxgNxXkHn"},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"if(config.active){\n    document.getElementById(\"logo\").src = \"\";\n    setNavigation();\n    Hooks.on(`renderSceneDirectory`, setNavigation)\n}\n\nfunction setNavigation(){\n    let element = document.getElementById(\"navigation\");\n    element.style.left = \"20px\";\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"cLaFA6W5WQ4x5iVl","name":"Logo Removal","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.IeOh2UnxxgNxXkHn"},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"const config = {\n    active : false,\n};\n\n\nif(config.active){\n    document.getElementById(\"logo\").src = \"\";\n    setNavigation();\n    Hooks.on(`renderSceneDirectory`, setNavigation)\n}\n\nfunction setNavigation(){\n    let element = document.getElementById(\"navigation\");\n    element.style.left = \"20px\";\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"6ph2QTloJ3cW0R0B","name":"Init Change (d10)","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.3cyzG5rpaG7mkkTl"}},"scope":"global","command":"const config = { active : false };\n\nif(config.active)\n{\n    CONFIG.Combat.initiative.formula = `d10 + @attributes.init.mod + @attributes.init.prof + @attributes.init.bonus`;\n    Combat.prototype._getInitiativeFormula = function(combatant) {\n        const actorData = combatant.actor.getRollData();\n        let formula = `d10 + ${actorData.attributes.init.mod} + ${actorData.attributes.init.prof} + ${actorData.attributes.init.bonus}`;\n    \n        const tiebreaker = game.settings.get(\"dnd5e\",\"initiativeDexTiebreaker\");\n        if(tiebreaker) formula += `+ ${actorData.abilities.dex.value/100}`;\n  \n        return formula;\n    }\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
