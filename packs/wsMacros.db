{"_id":"6ph2QTloJ3cW0R0B","name":"Init Change (d10)","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.3cyzG5rpaG7mkkTl"}},"scope":"global","command":"const config = { active : false };\n\nif(config.active)\n{\n    CONFIG.Combat.initiative.formula = `d10 + @attributes.init.mod + @attributes.init.prof + @attributes.init.bonus`;\n    Combat.prototype._getInitiativeFormula = function(combatant) {\n        const actorData = combatant.actor.getRollData();\n        let formula = `d10 + ${actorData.attributes.init.mod} + ${actorData.attributes.init.prof} + ${actorData.attributes.init.bonus}`;\n    \n        const tiebreaker = game.settings.get(\"dnd5e\",\"initiativeDexTiebreaker\");\n        if(tiebreaker) formula += `+ ${actorData.abilities.dex.value/100}`;\n  \n        return formula;\n    }\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"9Rwh5bEjgC2emrnd","name":"Proficiency Die","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.npe46niTYD6buTjL"}},"scope":"global","command":"/*\n  World Scripter : Proficiency Dice\n*/\nconst config = {\n  active : false,\n  bonusDie : {\n    2 : `1d4`,\n    3 : `1d6`,\n    4 : `1d8`,\n    5 : `1d10`,\n    6 : `1d12`\n  },\n  fn : {\n    error : (...args) => {ui.notifications.error(`Proficiency Die Macro | `, ...args);}\n  }\n}\nif(config.active)\n  Hooks.on(`preCreateChatMessage`, proficientMessage)\n\nfunction proficientMessage(message)\n{\n  if(message.user === game.user.id)\n  {    \n    //determine if proficient\n    let profObj = proficient(message);\n    if(profObj.prof === null || profObj.prof === 0) return;\n    let newProf = config.bonusDie[profObj.prof] || null;\n    if(newProf === null) return;\n\n    //remake roll without proficiency & with new bonus_die\n    let roll = new Roll(JSON.parse(message.roll).formula.replace(`+ ${profObj.search}`, `${profObj.keep ? `+ ${profObj.keep}` : ``} + ${newProf}`)).roll();\n\n    //change content & roll\n    setProperty(message,\"content\", `${roll.total}`);\n    setProperty(message,\"roll\", JSON.stringify(roll));\n  }\n}\n\nfunction proficient(message)\n{\n  let info = message.flags.dnd5e.roll;\n  let actor = canvas.tokens.get(message.speaker.token).actor || game.actors.get(message.speaker.actor);\n\n  if(!actor) return 0;\n\n  switch(info.type)\n  {\n    case `ability` :\n      return {\n        search : null, \n        prof : null, \n        keep : null,\n      };\n    case `save` : \n      let saveData = actor.data.data.abilities[info.abilityId];\n      return {\n        search : saveData.prof, \n        prof : (saveData.save - saveData.mod), \n        keep : null,\n      }\n    case `skill` :\n      let skillData = actor.data.data.skills[info.skillId];\n      return {\n        search : skillData.total, \n        prof : skillData.prof, \n        keep : skillData.mod,\n      };\n    case `attack` :\n      let {proficient} = actor.items.get(info.itemId).data.data;\n      return  {\n        search : actor.data.data.attributes.prof, \n        prof : proficient ? actor.data.data.attributes.prof : 0, \n        keep : null\n      }\n    default :\n      config.fn.error(`Type not accounted for ${info.type}`);\n      return 0;\n  }\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"E8puwa2kmVGhoab1","name":"Item Attack Cards","type":"script","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","scope":"global","command":"Item.prototype.getCardHTML = function ({ attacks = 1, sendMessage = true, description = false, whisper = game.settings.get(\"core\", \"rollMode\"), event = {}} = {}){\n  const message = (...args) => ChatMessage.create(ChatMessage.applyRollMode({content : args.join(``)}, whisper));\n  const item = this;\n  const HTML = `\n  <div style=\"display:flex;flex-direction:column;background:rgba(0, 0, 0, 0.1);border:1px solid #999;box-shadow: 0 0 0px #fff inset;\">\n    ${getHeaderHTML()}\n    ${description ? getDescriptionHTML() : ``}\n    ${this.hasSave ? getSaveHTML() : ``}\n    <div style=\"display:flex;flex-direction:row;width:100%\">\n      <div style=\"display:flex;flex-direction:column;justify-content:space-evenly;text-align:center;width:100%;\">${this.hasAttack ? getAttackHTML(attacks) :  ``}</div>\n      <div style=\"display:flex;flex-direction:column;justify-content:space-evenly;text-align:center;width:100%;\">${this.hasDamage ? getDamageHTML(attacks) :  ``}</div>\n    </div>\n    \n  </div>\n  `;\n\n  if(sendMessage) message(HTML);\n  return HTML;\n\n  function getHeaderHTML(){\n    return `\n    <div style=\"display:flex;text-align:left;flex-direction:row;\">\n      <img style=\"flex : 0 0 36px; margin-right:5px\" src=\"${item.actor.img}\" width=\"42\" height=\"42\"/>\n      <img style=\"flex : 0 0 36px; margin-right:5px\" src=\"${item.img}\" width=\"42\" height=\"42\"/>\n      <div style=\"display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;\">\n        <div style=\"font-size:small;\">${item.actor.name}</div>\n        <div style=\"font-size:small;\">${item.name}</div>\n      </div>\n    </div>\n    `;\n  }\n\n  function getDescriptionHTML(){\n    return `\n    <div style=\"display:flex;justify-content:center;align-items:center;width:100%;height:100%;\">\n      <div style=\"display:flex;text-align:center;font-size:small;padding:5px;margin:5px;background:rgba(0, 0, 0, 0.1);border:1px solid #999;box-shadow: 0 0 0px #fff inset;\">\n        ${item.data.data.description.value}\n      </div>\n    </div>\n    `;\n  }\n\n  function getSaveHTML(){\n    let { ability, dc } = getSaveINFO();\n    return `\n    <div style=\"display:flex;flex-direction:row;width:100%;\">\n      <div style=\"display:flex;flex-direction:column;justify-content:space-evenly;text-align:center;width:100%;\"> ${ability} </div>\n      <div style=\"display:flex;flex-direction:column;justify-content:space-evenly;text-align:center;width:100%;\"> DC : ${dc} </div>\n    </div>\n    `;\n  \n    function getSaveINFO(){\n      if(!item.hasSave) return;\n      let { ability, dc } = item.data.data.save;\n      return { \n        ability : `${CONFIG.DND5E.abilities[ability]} Save`,\n        dc\n      }\n    }\n  }\n\n  function getAttackHTML(number){\n    const attackRolls = Array(number).fill(0).map(e=> getAttackINFO());\n    const formula = attackRolls[0][0].roll?.formula;\n    console.log(attackRolls);\n    return `\n    <div style=\"font-size:x-small;\">Attack Roll</div>\n    <div style=\"font-size:x-small;\">[${formula}]</div>\n    ${attackRolls.reduce((acc, rolls)=> acc += `\n      <div style=\"display:flex;flex-direction:row;justify-content:space-evenly;background:rgba(0, 0, 0, 0.1);border:1px solid #999;box-shadow: 0 0 0px #fff inset;\">\n        ${rolls.reduce((acc, {roll})=> acc += `<div style=\"display:flex;font-size:12px;flex-shrink:1;${roll.terms[0].results[0].result === 1 ? `color:red` : ``}${roll.terms[0].results[0].result === roll.terms[0].faces ? `color:green` : ``}\">${roll.total}</div>`, ``)}\n      </div>\n    `, ``)}\n    `;\n  \n    function getAttackINFO(){\n      if(!item.hasAttack) return;\n      let {parts, rollData} = item.getAttackToHit();\n      return Array(2).fill(0).map((e,i)=> ({ roll : new Roll(`1d20 + ${parts.join(` + `)}`, rollData).evaluate() }));\n    } \n  }\n\n  function getDamageHTML(number){\n    const damageRolls = Array(number).fill(0).map(e=> getDamageINFO());\n    const formula = damageRolls[0][0].roll?.formula, type = damageRolls[0][0].type;\n    return `\n    <div style=\"font-size:x-small;\">Damage Roll</div>\n    <div style=\"font-size:x-small;\">[${formula} (${type})]</div>\n    ${damageRolls.reduce((acc, [{roll}])=> acc += `\n      <div style=\"display:flex;flex-direction:row;justify-content:space-evenly;background:rgba(0, 0, 0, 0.1);border:1px solid #999;box-shadow: 0 0 0px #fff inset;\">\n        <div style=\"display:flex;font-size:12px;flex-shrink:1;${roll.terms[0].results[0].result === 1 ? `color:red` : ``}${roll.terms[0].results[0].result === roll.terms[0].faces ? `color:green` : ``}\">${roll.total}</div>\n      </div>\n    `, ``)}\n    `;\n  \n    function getDamageINFO(){\n      if(!item.hasDamage) return;\n      let damageArray = item.getDerivedDamageLabel();\n      if(item.isVersatile && event?.shiftKey) damageArray[0] = item.data.data.damage.versatile;\n      return damageArray.map(({formula, damageType}, i)=> ({ roll : new Roll(`${formula}`).evaluate(), type : damageType }));\n    }\n  }\n}","folder":null,"sort":0,"permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"flags":{"core":{"sourceId":"Macro.JUdXcb1WPptJJQ5K"}}}
{"_id":"L9W2eBAVcKmg2EDm","name":"Global Functions","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"script","flags":{"core":{"sourceId":"Macro.gquC32RvjVE0P3tp"},"furnace":{"runAsGM":false},"combat-utility-belt":{"macroTrigger":""}},"scope":"global","command":"let windowFunctions = { buttonDialog, quickDialog };\n\nObject.entries(windowFunctions).forEach(([key,value])=> window[key] = value );\n\nArray.prototype.forEachAsync = async function (callback) {\n  for(let index = 0; index < this.length; index++)\n      await callback(this[index], index, this);\n}\n\nArray.prototype.shuffle = function() {\n  var currentIndex = this.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = this[currentIndex];\n    this[currentIndex] = this[randomIndex];\n    this[randomIndex] = temporaryValue;\n  }\n\n  return this;\n}\n\nasync function buttonDialog(data){\n  return await new Promise((resolve) => {\n    let buttons = {}, dialog;\n\n    data.buttons.forEach(([str, callback])=>{\n      buttons[str] = {\n        label : str,\n        callback\n      }\n    });\n  \n    dialog = new Dialog({title : data.title , content : data.content, buttons, close : () => resolve(true) }).render(true);\n  });\n}\n\nasync function quickDialog({data, title = `Quick Dialog`} = {}){\n  data = data instanceof Array ? data : [data];\n\n  return await new Promise((resolve) => {\n    let content = `\n    <table style=\"width:100%\">\n      ${data.map(({type, label, options}, i)=> {\n        if(type.toLowerCase() === `select`)\n        {\n          return `<tr><th style=\"width:50%\"><label>${label}</label></th><td style=\"width:50%\"><select id=\"${i}qd\">${options.map((e,i)=> `<option value=\"${e}\">${e}</option>`).join(``)}</td></tr>`;\n        }else if(type.toLowerCase() === `checkbox`){\n          return `<tr><th style=\"width:50%\"><label>${label}</label></th><td style=\"width:50%\"><input type=\"${type}\" id=\"${i}qd\" ${options || ``}/></td></tr>`;\n        }else{\n          return `<tr><th style=\"width:50%\"><label>${label}</label></th><td style=\"width:50%\"><input type=\"${type}\" id=\"${i}qd\" value=\"${options instanceof Array ? options[0] : options}\"/></td></tr>`;\n        }\n      }).join(``)}\n    </table>`;\n\n    new Dialog({\n      title, content,\n      buttons : {\n        Ok : { label : `Ok`, callback : (html) => {\n          resolve(Array(data.length).fill().map((e,i)=>{\n            let {type} = data[i];\n            if(type.toLowerCase() === `select`)\n            {\n              return html.find(`select#${i}qd`).val();\n            }else{\n              switch(type.toLowerCase())\n              {\n                case `text` :\n                case `password` :\n                case `radio` :\n                  return html.find(`input#${i}qd`)[0].value;\n                case `checkbox` :\n                  return html.find(`input#${i}qd`)[0].checked;\n                case `number` :\n                  return html.find(`input#${i}qd`)[0].valueAsNumber;\n              }\n            }\n          }));\n        }}\n      }\n    }).render(true);\n  });\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"Ze4poHGIZ7nEFz2K","name":"0 HP Death Overlay","permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"type":"chat","flags":{"core":{"sourceId":"Macro.NmhRh7L9wKok8Gzi"}},"scope":"global","command":"/*\n  World Scripter Macro : 0 HP Death Overlay\n*/\nconst config = {\n  active : false,\n  effectData : [\n    {\n      changes : [],\n      duration : {},\n      flags : { core : { overlay : true, statusId : \"dead\" }},\n      icon : \"icons/svg/skull.svg\",\n      label : \"dead\"\n    }\n  ]\n};\nif(config.active && game.user.isGM)\n  Hooks.on(`preUpdateToken`, deathOverlay);\n\nfunction deathOverlay(scene, tokenData,updateData)\n{\n  if(isZeroHealth() && isNPC())\n  {\n    setProperty(updateData, \"actorData.effects\", config.effectData);\n  }\n  function isZeroHealth()\n  {\n    return getProperty(updateData, \"actorData.data.attributes.hp.value\") === 0;\n  }\n  function isNPC()\n  {\n    return !game.actors.get(tokenData.actorId).hasPlayerOwner;\n  }\n}","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"cLaFA6W5WQ4x5iVl","name":"Logo Removal","type":"script","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","scope":"global","command":"const config = {\n    active : true,\n};\n\n\nif(config.active){\n    document.getElementById(\"logo\").src = \"\";\n    setNavigation();\n    Hooks.on(`renderSceneDirectory`, setNavigation)\n}\n\nfunction setNavigation(){\n    let element = document.getElementById(\"navigation\");\n    element.style.left = \"20px\";\n}","folder":null,"sort":0,"permission":{"default":0,"rY3aSQCPtPJz0xsx":3},"flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.IeOh2UnxxgNxXkHn"},"combat-utility-belt":{"macroTrigger":""}}}
{"name":"Clear Console","type":"script","author":"rY3aSQCPtPJz0xsx","img":"icons/svg/dice-target.svg","scope":"global","command":"console.clear();","folder":null,"sort":100001,"permission":{"default":2,"rY3aSQCPtPJz0xsx":2,"oN95dwBL7EYuwpti":2,"6k7j4c4xLMRc4Njh":2,"2btSSW80YOWoEPWx":2},"flags":{},"_id":"mWKDb3YnSdJrLR85"}
{"$$deleted":true,"_id":"mWKDb3YnSdJrLR85"}
